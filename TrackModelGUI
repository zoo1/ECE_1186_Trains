import java.awt.*;
import java.io.*;
import java.net.*;
import java.util.*;
import jxl.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableModel;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author admin
 */
public class TrackModelGUI extends javax.swing.JFrame {
    
    public static int webSocketNumber = 8004;
    public static int socketListenerNumber = 8005;
    private static String staticDir = "/static";
    private static String handlerDir = "/handlers";
    private static ArrayList<String> messageList = new ArrayList<String>();
    /**
     * Creates new form TrackModelGUI
     */
    public TrackModelGUI() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Load Track Map...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton4.setText("Export Track Map...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        //Create a file chooser
        //JFileChooser fc = new JFileChooser();
        //In response to a button click:
        //int returnVal = fc.showOpenDialog(TrackModelGUI.this);
        //File filename;
        //if (returnVal == JFileChooser.APPROVE_OPTION)
        //{
        //    filename = fc.getSelectedFile();
        //}
        //else
        //{
        //    filename = null;
        //}
        String filename = "C:\\Users\\admin\\Dropbox\\Software Engineering\\RealTrackModel.xlsx";
        java.util.List sheetData = new ArrayList();
        FileInputStream fis = null;
        Vector colNames = new Vector();
        Vector data = new Vector();
        
        try {
            //
            // Create a FileInputStream that will be use to read the excel file.
            //
            fis = new FileInputStream(filename);

            //
            // Create an excel workbook from the file system.
            //
            XSSFWorkbook workbook = new XSSFWorkbook(fis);
            //
            // Get the first sheet on the workbook.
            //
            XSSFSheet sheet = workbook.getSheetAt(0);
            int r = -1;
            int c;
            for (Row row : sheet) 
            {
                r++;
                c=0;
                Vector d = new Vector();
                for (Cell cell : row) 
                {
                    switch (cell.getCellType()) {
                        case XSSFCell.CELL_TYPE_STRING:
                            if (r < 1)
                            {
                                colNames.add(cell.getRichStringCellValue().getString());
                            }
                            else
                            {
                                d.add(cell.getRichStringCellValue().getString());
                            }
                            break;
                        case XSSFCell.CELL_TYPE_NUMERIC:
                            d.add(cell.getNumericCellValue());
                            break;
                        case XSSFCell.CELL_TYPE_BOOLEAN:
                            d.add(cell.getBooleanCellValue());
                            break;
                        case XSSFCell.CELL_TYPE_FORMULA:
                            d.add(cell.getCellFormula());
                            break;
                        case XSSFCell.CELL_TYPE_BLANK:
                            if (c <= 13)
                            {
                                d.add(cell.getNumericCellValue());
                            }
                            break;
                        default:
                }
                    c++;
            }
                data.add(d);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException ex) {
                    Logger.getLogger(TrackModelGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        DefaultTableModel model = new DefaultTableModel(data, colNames);
        jTable1.setModel(model);
        
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        //The following is pseudocode
        //JSONObject jsonobject = new JSONObject();
        //JSONArray jsonarray = new JSONArray();
        
        //int nRow = jTable1.getRowCount(), nCol = jTable1.getColumnCount();
        //Object[][] tableData = new Object[nRow][nCol];
        //for (int i = 0 ; i < nRow ; i++)
        //{
            //for (int j = 0 ; j < nCol ; j++)
            //{
                //jsonobject = jsonobject + ("\"" + colNames + "\": \"" + data[i][j] + "\",");
            //}
            //jsonarray += jsonobject;
        //}
        
        
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
        Object[][] tableData = new Object[nRow][nCol];
        String[] colNames = new String[13];
        for (int i = 1 ; i < nRow ; i++)
        {
            for (int j = 0 ; j < nCol ; j++)
            {
                tableData[i][j] = dtm.getValueAt(i,j);
                System.out.println(tableData[i][j]);
                if (i+1 == nRow)
                {
                    colNames[j] = dtm.getColumnName(j);
                }
            }
            
        }
        PrintWriter writer = null;
        try {
            writer = new PrintWriter("Track Info.json", "UTF-8");
            writer.print("[{");
            for (int i = 1 ; i < nRow ; i++)
            {
                for (int j = 0 ; j < nCol ; j++)
                {
                    if (j >= 12)
                    {
                        if (j == 12)
                        {
                            writer.print("\"Accessible_Blocks\":[" + tableData[i][j]);
                        }
                        else
                        {
                            writer.print(", " + tableData[i][j] + "]}");
                        }
                    }
                    else
                    {
                        writer.print("\"" + colNames[j] + "\":\"");
                        if (tableData[i][j].equals("N/A"))
                            writer.print("\",");
                        else
                            writer.print(tableData[i][j] + "\",");
                    }
                }
                if (i+1 != nRow)
                {
                    writer.print(",");
                    writer.println("{");
                }
            }
            writer.println("]");
            writer.close();
            }catch (IOException ex) {
            // report
            } finally {
            try {writer.close();} catch (Exception ex) {}
            }
    }                                        

    /**
     * @param args the command line arguments
     */
    
    
    
    
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        SocketListener listener = new SocketListener();
		listener.start();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrackModelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrackModelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrackModelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrackModelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrackModelGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}

